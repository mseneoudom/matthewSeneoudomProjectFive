{"version":3,"sources":["firebase.js","MobileNav.js","Nav.js","RecipeForm.js","FocusRecipe.js","SavedRecipes.js","TermsOfUse.js","Register.js","ResetPassword.js","Login.js","UserSettings.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","MobileNav","className","onClick","this","props","toggleMobileNav","toggleSection","loggedIn","userLogout","Component","Nav","setState","showMobileNav","state","item","RecipeForm","handleClick","e","preventDefault","submitRecipe","database","ref","push","newDraft","name","ingredients","instructions","description","finalImage","finaleImageUrl","placeholder","toggleSelect","alert","updateTitle","draft","target","value","updateDescription","updateIngredient","listArray","split","updateInstructions","uploadImageState","console","log","files","image","uploadTask","storage","put","then","child","getDownloadURL","url","imageUrl","finalImageUrl","auth","currentUser","author","displayName","authorImage","photoURL","action","src","alt","htmlFor","type","id","onChange","maxLength","disabled","FocusRecipe","focusedItem","focusKey","on","response","val","toggleFocus","key","map","ingredient","index","instruction","SavedRecipes","focusRecipe","showFocus","recipes","newState","data","recipe","Login","loginInputs","toggleTerms","Register","handleChange","listenForMatch","registerPassword","confirmPassword","passwordsMatch","registerUser","termsCheckBox","createUserWithEmailAndPassword","registerEmail","user","updateProfile","catch","error","handleCheckbox","showTerm","minLength","TermsOfUse","ResetPassword","passwordStateChange","email","resetPassword","sendPasswordResetEmail","forgotPassword","userLogin","signInWithEmailAndPassword","loginName","loginPassword","UserSettings","getUserInfo","uid","undefined","changeImageState","userUploadImage","uploadImage","updateDisplayName","setDisplayName","updateEmail","setEmail","updatePassword","setPassword","Home","App","selectSection","select","allStates","showSection","signOut","updateRecipeState","recipeAdded","showSavedRecipes","showRecipeForm","showLogin","showRegister","showHome","showUserSettings","userID","onAuthStateChanged","authListener","logoutFunction","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2RAgBAA,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,8CAKIR,QAAf,ECUeS,E,uKAvBF,IAAD,OACJ,OACI,yBAAKC,UAAU,YAAYC,QAASC,KAAKC,MAAMC,iBAC3C,wBAAIJ,UAAU,eACV,wBAAIC,QAAS,kBAAI,EAAKE,MAAME,cAAc,cAA1C,QACA,wBAAIJ,QAAS,kBAAI,EAAKE,MAAME,cAAc,oBAA1C,eACA,wBAAIJ,QAAS,kBAAI,EAAKE,MAAME,cAAc,sBAA1C,gBACCH,KAAKC,MAAMG,SACR,oCACI,wBAAIL,QAAS,kBAAI,EAAKE,MAAME,cAAc,sBAAqB,uBAAGL,UAAU,uBAA5E,aACA,wBAAIC,QAAS,kBAAI,EAAKE,MAAMI,eAA5B,WAGJ,oCACI,wBAAIN,QAAS,kBAAI,EAAKE,MAAME,cAAc,eAA1C,SACA,wBAAIJ,QAAS,kBAAI,EAAKE,MAAME,cAAc,kBAA1C,mB,GAlBJG,aCkDTC,E,kDAhDX,aAAc,IAAD,8BACT,gBAMJL,gBAAgB,WACZ,EAAKM,SAAS,CACVC,eAAe,EAAKC,MAAMD,iBAP9B,EAAKC,MAAO,CACRD,eAAc,GAHT,E,qDAaJ,IAAD,OACJ,OACA,oCACI,yBAAKX,UAAU,cACX,4BAAQA,UAAU,kBAAkBC,QAAS,kBAAI,EAAKG,oBAAmB,uBAAGJ,UAAU,iBACtF,yBAAKA,UAAU,SACX,yBAAKA,UAAU,iBACX,uBAAGA,UAAU,qBAEjB,wBAAIA,UAAU,SACV,wBAAIA,UAAU,UAAUC,QAAS,kBAAI,EAAKE,MAAME,cAAc,cAA9D,eACA,wBAAIJ,QAAS,kBAAI,EAAKE,MAAME,cAAc,cAA1C,QACA,wBAAIJ,QAAS,kBAAI,EAAKE,MAAME,cAAc,oBAA1C,eACA,wBAAIJ,QAAS,kBAAI,EAAKE,MAAME,cAAc,sBAA1C,gBACCH,KAAKC,MAAMG,SACR,oCACI,wBAAIL,QAAS,kBAAI,EAAKE,MAAME,cAAc,sBAAqB,uBAAGL,UAAU,uBAA5E,aACA,wBAAIC,QAAS,kBAAI,EAAKE,MAAMI,eAA5B,WAGJ,oCACI,wBAAIN,QAAS,kBAAI,EAAKE,MAAME,cAAc,eAA1C,SACA,wBAAIJ,QAAS,kBAAI,EAAKE,MAAME,cAAc,kBAA1C,gBAMnBH,KAAKU,MAAMD,cACR,kBAAC,EAAD,CAAWN,cAAe,SAACQ,GAAD,OAAQ,EAAKV,MAAME,cAAcQ,IAAOT,gBAAiBF,KAAKE,gBAAiBE,SAAUJ,KAAKC,MAAMG,SAAUC,WAAY,kBAAI,EAAKJ,MAAMI,gBAClK,U,GA5CCC,aCuKHM,E,kDArKX,aAAc,IAAD,8BACT,gBAaJC,YAAY,SAACC,GACTA,EAAEC,kBAfO,EAkBbC,aAAa,SAACF,GACV,EAAKD,YAAYC,GACH1B,EAAS6B,WAAWC,IAAI,WAChCC,KAAK,EAAKT,MAAMU,UAEtB,EAAKZ,SAAS,CACVY,SAAS,CACLC,KAAK,GACLC,YAAY,GACZC,aAAa,GACbC,YAAY,GACZC,WAAW,KACXC,eAAe,GACfC,YAAY,MAIpB,EAAK1B,MAAM2B,aAAa,oBACxBC,MAAM,gCApCG,EAwCbC,YAAY,SAAChB,GACT,IAAMiB,EAAQ,EAAKrB,MAAMU,SACzBW,EAAMV,KAAOP,EAAEkB,OAAOC,MACtB,EAAKzB,SAAS,CAACY,SAASW,KA3Cf,EA8CbG,kBAAkB,SAACpB,GACf,IAAMiB,EAAQ,EAAKrB,MAAMU,SACzBW,EAAMP,YAAcV,EAAEkB,OAAOC,MAC7B,EAAKzB,SAAS,CAACY,SAASW,KAjDf,EAoDbI,iBAAiB,SAACrB,GACd,IAAMiB,EAAQ,EAAKrB,MAAMU,SACnBgB,EAAYtB,EAAEkB,OAAOC,MAAMI,MAAM,MACvCN,EAAMT,YAAcc,EACpB,EAAK5B,SAAS,CAACY,SAASW,KAxDf,EA0DbO,mBAAmB,SAACxB,GAChB,IAAMiB,EAAQ,EAAKrB,MAAMU,SACnBgB,EAAYtB,EAAEkB,OAAOC,MAAMI,MAAM,MACvCN,EAAMR,aAAea,EACrB,EAAK5B,SAAS,CAACY,SAASW,KA9Df,EAiEbQ,iBAAmB,SAACzB,GAChB0B,QAAQC,IAAI3B,EAAEkB,OAAOU,OACrB,IAAMC,EAAQ7B,EAAEkB,OAAOU,MAAM,GACvBX,EAAO,EAAKrB,MAAMU,SACxBW,EAAMN,WAAakB,EACnB,EAAKnC,SAAS,CAACY,SAAUW,KAtEhB,EAyEba,WAAa,SAAC9B,GACVA,EAAEC,iBACF,IAAM4B,EAAQ,EAAKjC,MAAMU,SAASK,WAClCrC,EAASyD,UAAU3B,IAAnB,uBAAuCyB,EAAMtB,OAAQyB,IAAIH,GACxDI,MAAK,WACF3D,EAASyD,UAAU3B,IAAI,gBAAgB8B,MAAML,EAAMtB,MAAM4B,iBAAiBF,MAAK,SAACG,GAC5E,IAAMC,EAAWD,EACXnB,EAAQ,EAAKrB,MAAMU,SACzBW,EAAMqB,cAAgBD,EACtB,EAAK3C,SAAS,CACVY,SAAWW,WAjFvB,EAAKrB,MAAO,CACZU,SAAU,CACNC,KAAK,GACLC,YAAY,GACZC,aAAa,GACbC,YAAY,GACZC,WAAW,KACX2B,cAAc,KATT,E,gEA0FT,IAAMhC,EAAWpB,KAAKU,MAAMU,SACQ,OAAhChC,EAASiE,OAAOC,cAChBlC,EAASmC,OAASnE,EAASiE,OAAOC,YAAYE,YAC9CpC,EAASqC,YAAcrE,EAASiE,OAAOC,YAAYI,SACnD1D,KAAKQ,SAAS,CACVY,gB,+BAMR,OACI,6BAAStB,UAAU,qBACdE,KAAKC,MAAMG,SACZ,0BAAMuD,OAAO,SAAS7D,UAAU,cAC5B,6CAEA,yBAAKA,UAAU,kBACX,yBAAK8D,IAAK5D,KAAKU,MAAMU,SAASgC,cAAeS,IAAK7D,KAAKU,MAAMU,SAASI,eAG1E,2BAAOsC,QAAQ,qBAAf,wCACA,2BAAOC,KAAK,OAAOC,GAAG,oBAAoBC,SAAUjE,KAAKuC,mBACzD,4BAAQxC,QAASC,KAAK4C,YAAtB,gBAEA,2BAAOkB,QAAQ,eAAf,kBACA,2BAAOC,KAAK,OAAOC,GAAG,cAAcE,UAAU,KAAKD,SAAUjE,KAAK8B,YAAaG,MAAOjC,KAAKU,MAAMU,SAASC,OAE1G,2BAAOyC,QAAQ,qBAAf,mCACA,8BAAUE,GAAG,oBAAoBC,SAAUjE,KAAKkC,kBAAmBD,MAAOjC,KAAKU,MAAMU,SAASI,cAE9F,2BAAOsC,QAAQ,qBAAf,0FACA,8BAAUE,GAAG,oBAAoBC,SAAUjE,KAAKmC,iBAAkBR,YAAY,0BAA0BM,MAAOjC,KAAKU,MAAMU,SAASO,cAEnI,2BAAOmC,QAAQ,eAAf,8EACA,8BAAUE,GAAG,cAAcC,SAAUjE,KAAKsC,mBAAoBL,MAAOjC,KAAKU,MAAMU,SAASO,cAEzF,4BAAQ5B,QAASC,KAAKgB,cAAtB,WAGJ,6BAASlB,UAAU,qBACf,sEAEA,0BAAM6D,OAAO,SAAS7D,UAAU,cAC5B,6CAEA,yBAAKA,UAAU,kBACX,yBAAK8D,IAAK5D,KAAKU,MAAMU,SAASgC,cAAeS,IAAK7D,KAAKU,MAAMU,SAASI,eAG1E,2BAAOsC,QAAQ,qBAAf,wCACA,2BAAOC,KAAK,OAAOC,GAAG,oBAAoBG,UAAQ,EAACF,SAAUjE,KAAKuC,mBAClE,4BAAQxC,QAASC,KAAK4C,WAAYuB,UAAQ,GAA1C,gBAEA,2BAAOL,QAAQ,eAAf,kBACA,2BAAOC,KAAK,OAAOC,GAAG,cAAcC,SAAUjE,KAAK8B,YAAaG,MAAOjC,KAAKU,MAAMU,SAASC,KAAM8C,UAAQ,IAEzG,2BAAOL,QAAQ,qBAAf,mCACA,8BAAUE,GAAG,oBAAoBC,SAAUjE,KAAKkC,kBAAmBD,MAAOjC,KAAKU,MAAMU,SAASI,YAAa2C,UAAQ,IAEnH,2BAAOL,QAAQ,qBAAf,0FACA,8BAAUE,GAAG,oBAAoBC,SAAUjE,KAAKmC,iBAAkBR,YAAY,0BAA0BM,MAAOjC,KAAKU,MAAMU,SAASO,YAAawC,UAAQ,IAExJ,2BAAOL,QAAQ,eAAf,8EACA,8BAAUE,GAAG,cAAcC,SAAUjE,KAAKsC,mBAAoBL,MAAOjC,KAAKU,MAAMU,SAASO,YAAawC,UAAQ,IAE9G,4BAAQpE,QAASC,KAAKgB,aAAcmD,UAAQ,GAA5C,iB,GA7JC7D,aCoDV8D,E,kDAnDX,aAAc,IAAD,8BACT,gBACK1D,MAAQ,CACT2D,YAAY,CACR/C,YAAY,GACZC,aAAa,KALZ,E,gEAUO,IAAD,OACfnC,EAAS6B,WAAWC,IAAI,WAAWlB,KAAKC,MAAMqE,UAAUC,GAAG,SAAS,SAACC,GACjE,IAAMH,EAAcG,EAASC,MAC7B,EAAKjE,SAAS,CACV6D,qB,+BAKP,IAAD,OACJ,OACI,6BAASvE,UAAU,uBAAuBC,QAAS,kBAAI,EAAKE,MAAMyE,gBAC9D,yBAAK5E,UAAU,gBAAgB6E,IAAK,KAAK3E,KAAKC,MAAMqE,UAChD,yBAAKxE,UAAU,+BACX,yBAAK8D,IAAK5D,KAAKU,MAAM2D,YAAYjB,cAAeS,IAAK7D,KAAKU,MAAM2D,YAAY7C,eAEhF,yBAAK1B,UAAU,0BACX,4BAAKE,KAAKU,MAAM2D,YAAYhD,MAC5B,2BAAIrB,KAAKU,MAAM2D,YAAY7C,cAE/B,yBAAK1B,UAAU,yBACX,2CACCE,KAAKU,MAAM2D,YAAY/C,YAAYsD,KAAI,SAACC,EAAYC,GACrD,OACI,wBAAIH,IAAK,KAAK,EAAKjE,MAAM2D,YAAYhD,KAAK,eAAeyD,GAAQD,OAIzE,yBAAK/E,UAAU,2BACX,0CACCE,KAAKU,MAAM2D,YAAY9C,aAAaqD,KAAI,SAACG,EAAaD,GACvD,OACI,wBAAIH,IAAK,KAAK,EAAKjE,MAAM2D,YAAYhD,KAAK,iBAAiByD,GAAQC,a,GA3CjEzE,aCwEX0E,E,kDAtEX,aAAc,IAAD,8BACT,gBAsBJC,YAAY,SAACN,GACT,EAAKnE,SAAS,CACV0E,WAAU,EACVZ,SAAUK,KA1BL,EA8BbD,YAAY,WACR,EAAKlE,SAAS,CACV0E,WAAW,EAAKxE,MAAMwE,aA9B1B,EAAKxE,MAAQ,CACbyE,QAAU,GACVD,WAAU,EACVZ,SAAS,IALA,E,gEASO,IAAD,OACDlF,EAAS6B,WAAWC,IAAI,WAChCqD,GAAG,SAAS,SAACC,GACnB,IAAMY,EAAU,GACVC,EAAOb,EAASC,MACtB,IAAK,IAAIE,KAAOU,EACZD,EAASjE,KAAK,CAACwD,IAAIA,EAAKtD,KAAMgE,EAAKV,KAEvC,EAAKnE,SAAS,CACV2E,QAASC,S,+BAkBZ,IAAD,OACJ,OACI,6BAAStF,UAAU,uBACf,yBAAKA,UAAU,gBACVE,KAAKU,MAAMyE,QAAQP,KAAI,SAACU,EAAQR,GAC7B,OACA,wBAAIhF,UAAU,WAAW6E,IAAK,MAAMW,EAAOX,KACvC,wBAAI7E,UAAU,WAAW6E,IAAKW,EAAOX,IAAKX,GAAIsB,EAAOX,IAAK5E,QAAS,kBAAI,EAAKkF,YAAYK,EAAOX,OAC/F,yBAAK7E,UAAU,8BACX,yBAAK8D,IAAK0B,EAAOjE,KAAK+B,cAAeS,IAAKyB,EAAOjE,KAAKG,eAE1D,yBAAK1B,UAAU,uBACX,4BAAKwF,EAAOjE,KAAKA,MACjB,yBAAKvB,UAAU,mBACX,yCACA,yBAAKA,UAAU,6BACX,yBAAK8D,IAAK0B,EAAOjE,KAAKoC,YAAaI,IAAI,iBAE3C,2BAAIyB,EAAOjE,KAAKkC,SAEpB,uBAAGzD,UAAU,qBAAqBwF,EAAOjE,KAAKG,oBAO7DxB,KAAKU,MAAMwE,UACR,kBAAC,EAAD,CAAaZ,SAAUtE,KAAKU,MAAM4D,SAAUI,YAAa1E,KAAK0E,cAC7D,U,GAlEUpE,a,OC+DZiF,E,kDAjEX,aAAc,IAAD,8BACT,gBAQJC,YAAa,SAAC1E,GACVA,EAAEC,iBACF,EAAKP,SAAL,eACKM,EAAEkB,OAAOgC,GAAKlD,EAAEkB,OAAOC,SAV5B,EAAKvB,MAAM,GAFF,E,qDAkBJ,IAAD,OACJ,OACI,6BAASZ,UAAU,oBAAoBC,QAAS,kBAAI,EAAKE,MAAMwF,gBAC3D,yBAAK3F,UAAU,aACX,2BAAOgE,QAAQ,kBACf,mDAEpB,0JAEA,8NAEA,sCACA,sKAEA,2TAEA,sCACA,4UAEA,4CAEA,mEACA,mFACA,sFACA,qEACA,6EAEA,6rBAEA,kNAEA,8DAEA,0DACA,kHAEA,gDACA,2ZAGoB,2BAAOC,KAAK,WAAWC,GAAG,yB,GA3D1B1D,aCgHLoF,E,kDA7GX,aAAc,IAAD,8BACT,gBAaJC,aAAa,SAAC7E,GACV,EAAK8E,iBACL,EAAKpF,SAAL,eACKM,EAAEkB,OAAOgC,GAAMlD,EAAEkB,OAAOC,SAjBpB,EAqBb2D,eAAe,WACP,EAAKlF,MAAMmF,mBAAqB,EAAKnF,MAAMoF,iBAAkD,KAA/B,EAAKpF,MAAMmF,iBACzE,EAAKrF,SAAS,CAACuF,gBAAiB,IAEhC,EAAKvF,SAAS,CAACuF,gBAAiB,KAzB3B,EA6BbC,aAAc,SAAClF,GAGX,GAFAA,EAAEC,kBAE6B,IAA3B,EAAKL,MAAMuF,gBAAoD,IAA5B,EAAKvF,MAAMqF,eAC9C,OAAO3G,EAASiE,OAAO6C,+BAA+B,EAAKxF,MAAMyF,cAAe,EAAKzF,MAAMmF,kBAC1F9C,MAAK,SAACqD,GACHhH,EAASiE,OAAOC,YAAY+C,cAAc,CACtC7C,YAAY,EAAK9C,MAAM8C,YACvBE,SAAS,EAAKhD,MAAMgD,cAEzBX,MAAK,WACJ,EAAKvC,SAAS,CACV2F,cAAc,GACdN,iBAAiB,GACjBC,gBAAgB,GAChBG,eAAe,EACfF,gBAAgB,EAChBvC,YAAa,GACbE,SAAS,8DAGhB4C,OAAM,SAACC,GACJ1E,MAAM0E,OAnDL,EAwDbC,eAAgB,SAAC1F,GACb,EAAKN,SAAL,eACKM,EAAEkB,OAAOgC,IAAO,EAAKtD,MAAMuF,iBA1DvB,EA8DbR,YAAY,WACR,EAAKjF,SAAS,CACViG,UAAU,EAAK/F,MAAM+F,YA9DzB,EAAK/F,MAAM,CACPyF,cAAc,GACdN,iBAAiB,GACjBC,gBAAgB,GAChBG,eAAe,EACfF,gBAAgB,EAChBvC,YAAa,GACbiD,UAAU,EACV/C,SAAS,0DAVJ,E,qDAqEJ,IAAD,OACJ,OACI,6BAAS5D,UAAU,mBACf,0BAAMA,UAAU,gBACZ,yBAAKA,UAAU,8BACX,yBAAK8D,IAAK5D,KAAKU,MAAMgD,SAAUG,IAAK7D,KAAKU,MAAM8C,YAAa,gBAGhE,wCACA,uFACA,sDAA2B,0BAAMzD,QAAS,kBAAI,EAAKE,MAAM2B,aAAa,eAA3C,2CAE3B,2BAAOkC,QAAQ,iBAAf,SACA,2BAAOC,KAAK,QAAQC,GAAG,gBAAgBC,SAAUjE,KAAK2F,eAEtD,2BAAO7B,QAAQ,oBAAf,YACA,2BAAOC,KAAK,WAAWC,GAAG,mBAAmBC,SAAUjE,KAAK2F,aAAce,UAAU,MAEpF,2BAAO5C,QAAQ,mBAAf,oBACA,2BAAOC,KAAK,WAAWC,GAAG,kBAAkBC,SAAUjE,KAAK2F,eAC1D3F,KAAKU,MAAMqF,eAAe,KAAK,uDAEhC,2BAAOjC,QAAQ,eAAf,gBACA,2BAAOC,KAAK,OAAOC,GAAG,cAAcE,UAAU,KAAKD,SAAUjE,KAAK2F,eAElE,yBAAK7F,UAAU,kBACX,2BAAOiE,KAAK,WAAWC,GAAG,gBAAgBC,SAAUjE,KAAKwG,iBACzD,2BAAO1C,QAAQ,iBAAf,gBAA4C,0BAAM/D,QAAS,WAAK,EAAKS,SAAS,CAACiG,UAAS,MAA5C,sCAIhD,4BAAQ1G,QAASC,KAAKgG,cAAtB,gBAEChG,KAAKU,MAAM+F,SAAW,kBAACE,EAAD,CAAYlB,YAAa,kBAAI,EAAKA,iBAAmB,W,GAvGzEnF,aC6CRsG,E,kDA7CX,aAAc,IAAD,8BACT,gBAMJC,oBAAoB,SAAC/F,GACjB,EAAKN,SAAS,CAACsG,MAAOhG,EAAEkB,OAAOC,SARtB,EAWb8E,cAAc,SAACjG,GACXA,EAAEC,iBAEF3B,EAASiE,OAAO2D,uBAAuB,EAAKtG,MAAMoG,OACjD/D,MAAK,WACFlB,MAAM,yCACN,EAAK5B,MAAM2B,aAAa,aACxB,EAAKpB,SAAS,CACVsG,MAAM,QAGbR,OAAM,WACHzE,MAAM,oCArBV,EAAKnB,MAAM,CACPoG,MAAM,IAHD,E,qDA2BJ,IAAD,OACJ,OACI,6BAAShH,UAAU,yBACf,yBAAKA,UAAU,iBACX,8EAEA,2BAAOgE,QAAQ,iBAAf,kBACA,2BAAOC,KAAK,OAAOC,GAAG,gBAAgBC,SAAUjE,KAAK6G,oBAAqB5E,MAAOjC,KAAKU,MAAMoG,QAE5F,4BAAQ/G,QAASC,KAAK+G,eAAtB,kBAEA,0BAAMhH,QAAS,kBAAI,EAAKE,MAAMgH,mBAA9B,mB,GAvCQ3G,aC6DbiF,E,kDA3DX,aAAc,IAAD,8BACT,gBAQJ2B,UAAY,SAACpG,GACTA,EAAEC,iBACF3B,EAASiE,OAAO8D,2BAA2B,EAAKzG,MAAM0G,UAAW,EAAK1G,MAAM2G,eAAetE,MAAK,SAACqD,GAC7F5D,QAAQC,IAAI,kCACb6D,OAAM,SAACC,GACN1E,MAAM0E,OAdD,EAkBbf,YAAa,SAAC1E,GACVA,EAAEC,iBACF,EAAKP,SAAL,eACKM,EAAEkB,OAAOgC,GAAKlD,EAAEkB,OAAOC,SArBnB,EAyBbgF,eAAe,WACX,EAAKzG,SAAS,CACVyG,gBAAkB,EAAKvG,MAAMuG,kBAzBjC,EAAKvG,MAAM,CACP0G,UAAU,GACVC,cAAc,GACdJ,gBAAe,GALV,E,qDAiCJ,IAAD,OACJ,OACI,oCACA,6BAASnH,UAAU,gBACf,0BAAMA,UAAU,cACZ,qCAEA,2BAAOgE,QAAQ,aAAf,YACA,2BAAOC,KAAK,OAAOC,GAAG,YAAYC,SAAUjE,KAAKwF,cAEjD,2BAAO1B,QAAQ,iBAAf,YACA,2BAAOC,KAAK,WAAWC,GAAG,gBAAgBC,SAAUjE,KAAKwF,cAEzD,qDAA0B,0BAAMzF,QAAS,WAAK,EAAKE,MAAM2B,aAAa,kBAA5C,2CAC1B,oDAAyB,0BAAM7B,QAAS,kBAAI,EAAKkH,mBAAxB,0CAGzB,4BAAQlH,QAASC,KAAKkH,WAAtB,WAGPlH,KAAKU,MAAMuG,eAAiB,kBAAC,EAAD,CAAerF,aAAc,SAACjB,GAAQ,EAAKV,MAAM2B,aAAajB,IAAQsG,eAAgB,kBAAI,EAAKA,oBAAsB,U,GAtD1I3G,aCoJLgH,E,kDApJX,aAAc,IAAD,8BACT,gBASJC,YAAY,WACR,IAAMnB,EAAOhH,EAASiE,OAAOC,YACvBA,EAAc,CAChBE,YAAa4C,EAAK5C,YAClBsD,MAAOV,EAAKU,MACZpD,SAAW0C,EAAK1C,SAChB8D,IAAMpB,EAAKoB,UAEaC,IAAxBnE,EAAYI,UAAiD,OAAxBJ,EAAYI,WACjDJ,EAAYI,SAAW,0DAG3B,EAAKlD,SAAS,CACV8C,iBAvBK,EA+BbqC,aAAa,SAAC7E,GACV,EAAKN,SAAL,eACKM,EAAEkB,OAAOgC,GAAKlD,EAAEkB,OAAOC,SAjCnB,EAqCbyF,iBAAiB,SAAC5G,GACd,IAAM6B,EAAQ7B,EAAEkB,OAAOU,MAAM,GAC7B,EAAKlC,SAAS,CACVmH,gBAAkBhF,KAxCb,EA4CbiF,YAAY,SAAC9G,GACTA,EAAEC,iBACF,IAAM4B,EAAQ,EAAKjC,MAAMiH,gBACzBvI,EAASyD,UAAU3B,IAAnB,qBAAqCyB,EAAMtB,OAAQyB,IAAIH,GACtDI,MAAK,WACF3D,EAASyD,UAAU3B,IAAI,cAAc8B,MAAML,EAAMtB,MAAM4B,iBAAiBF,MAAK,SAACG,GAC1E,IAAMC,EAAWD,EACjB9D,EAASiE,OAAOC,YAAY+C,cAAc,CAAC3C,SAAUP,IACrD,IAAMG,EAAc,EAAK5C,MAAM4C,YAC/BA,EAAYI,SAAWP,EACvB,EAAK3C,SAAS,CACV8C,cACAqE,gBAAgB,YAxDnB,EA8DbE,kBAAkB,SAAC/G,GACfA,EAAEC,iBACF3B,EAASiE,OAAOC,YAAY+C,cAAc,CACtC7C,YAAa,EAAK9C,MAAMoH,iBACzB/E,MAAK,WACJ,EAAKvC,SAAS,CACVsH,eAAe,KAEnB,EAAKP,iBAERjB,OAAM,SAACC,GACJ1E,MAAM0E,OAzED,EA4EbwB,YAAY,SAACjH,GACTA,EAAEC,iBACF3B,EAASiE,OAAOC,YAAYyE,YAAY,EAAKrH,MAAMsH,UAClDjF,MAAK,WACF,EAAKvC,SAAS,CACVwH,SAAS,KAEb,EAAKT,iBAERjB,OAAM,SAACC,GACJ1E,MAAM0E,OAtFD,EA0Fb0B,eAAe,SAACnH,GACZA,EAAEC,iBACF3B,EAASiE,OAAOC,YAAY2E,eAAe,EAAKvH,MAAMwH,aACrDnF,MAAK,WACF,EAAKvC,SAAS,CACVsH,eAAe,KAEnB,EAAKP,iBAERjB,OAAM,SAACC,GACJ1E,MAAM0E,OAlGV,EAAK7F,MAAM,CACP4C,YAAY,GACZwE,eAAe,GACfH,gBAAgB,GAChBK,SAAS,GACTE,YAAY,IAPP,E,gEA4BTlI,KAAKuH,gB,+BA8EL,OACI,6BAASzH,UAAU,uBACX,qDACJ,0BAAMA,UAAU,gBACZ,yBAAKA,UAAU,8BACX,yBAAK8D,IAAK5D,KAAKU,MAAM4C,YAAYI,SAAUG,IAAK7D,KAAKU,MAAM4C,YAAYjC,KAAM,qBAGjF,yBAAKvB,UAAU,qBACX,2BAAIE,KAAKU,MAAM4C,YAAYE,aAC3B,2BAAIxD,KAAKU,MAAM4C,YAAYwD,QAG/B,yBAAKhH,UAAU,qBACX,2BAAOgE,QAAQ,mBAAf,6BACA,2BAAOC,KAAK,OAAOC,GAAG,kBAAkBC,SAAUjE,KAAK0H,mBACvD,4BAAQ3H,QAASC,KAAK4H,aAAtB,iBAGJ,yBAAK9H,UAAU,qBACX,2BAAOgE,QAAQ,kBAAf,gBACA,2BAAOC,KAAK,OAAOG,UAAU,KAAKF,GAAG,iBAAiBC,SAAUjE,KAAK2F,aAAc1D,MAAOjC,KAAKU,MAAMoH,iBACrG,4BAAQ/H,QAASC,KAAK6H,mBAAtB,wBAGJ,yBAAK/H,UAAU,qBACX,2BAAOgE,QAAQ,YAAf,gBACA,2BAAOC,KAAK,QAAQC,GAAG,WAAWC,SAAUjE,KAAK2F,aAAc1D,MAAOjC,KAAKU,MAAMsH,WACjF,4BAAQjI,QAASC,KAAK+H,aAAtB,iBAGJ,yBAAKjI,UAAU,qBACX,2BAAOgE,QAAQ,eAAf,mBACA,2BAAOC,KAAK,WAAWC,GAAG,cAAcC,SAAUjE,KAAK2F,aAAc1D,MAAOjC,KAAKU,MAAMwH,cACvF,4BAAQnI,QAASC,KAAKiI,gBAAtB,0B,GA7IG3H,a,iBCoBZ6H,E,uKAlBF,IAAD,OACJ,OACmC,OAA/B/I,IAASiE,OAAOC,YAChB,6BAASxD,UAAU,eACf,gEACA,wGACA,2EAAgD,0BAAMC,QAAS,kBAAI,EAAKE,MAAM2B,aAAa,kBAA3C,qCAAhD,2BAA4K,0BAAM7B,QAAS,kBAAI,EAAKE,MAAM2B,aAAa,oBAA3C,gBAA5K,cAGJ,6BAAS9B,UAAU,eACf,4CAAkBV,IAASiE,OAAOC,YAAYE,YAA9C,KACA,oIAAyG,0BAAMzD,QAAS,kBAAI,EAAKE,MAAM2B,aAAa,sBAA3C,gBACzG,mFAAwD,0BAAM7B,QAAS,kBAAI,EAAKE,MAAM2B,aAAa,oBAA3C,gBAAxD,kB,GAdGtB,aC6HJ8H,E,kDArHb,aAAc,IAAD,8BACX,gBAiBFC,cAAc,SAACC,GACb,IAAMC,EAAY,EAAK7H,MAAM8H,YAC7B,IAAK,IAAI7D,KAAO4D,EACZA,EAAU5D,GAAO,KAErB,EAAKnE,SACH,CAACgI,YAAaD,IAEhB,IAAMnD,EAAU,EAAK1E,MAAM8H,YAC3BpD,EAASkD,IAAWlD,EAASkD,GAC7B,EAAK9H,SAAS,CACZgI,YAAcpD,KA7BL,EAoEb/E,WAAa,WACXjB,EAASiE,OAAOoF,UAChB,EAAKjI,SAAS,CACZ0G,WAAU,KAvED,EA2EbwB,kBAAkB,WAChB,EAAKlI,SAAS,CACZmI,aAAa,KA3Ef,EAAKjI,MAAQ,CACX8H,YAAY,CACVI,kBAAkB,EAClBC,gBAAgB,EAChBC,WAAW,EACXC,cAAa,EACbC,UAAS,EACTC,kBAAiB,GAEnBN,aAAY,EACZzB,WAAU,EACVgC,OAAO,MAbE,E,2DAiCE,IAAD,OACZ9J,EAASiE,OAAO8F,oBAAmB,SAAC/C,GACzB,OAATA,EACE,EAAK5F,SAAS,CACZgI,YAAY,CACVI,kBAAkB,EAClBC,gBAAgB,EAChBC,WAAW,EACXC,cAAa,EACbC,UAAS,EACTC,kBAAiB,GAEnB/B,WAAU,EACVgC,OAAQ9C,IAGZ,EAAK5F,SAAS,CACZgI,YAAY,CACVI,kBAAkB,EAClBC,gBAAgB,EAChBC,WAAW,EACXC,cAAa,EACbC,UAAS,EACTC,kBAAiB,GAEnB/B,WAAU,EACVgC,OAAQ9C,S,0CAMZpG,KAAKoJ,iB,+BAgBE,IAAD,OACR,OACE,oCACA,kBAAC,EAAD,CAAKjJ,cAAe,SAACQ,GAAD,OAAS,EAAK0H,cAAc1H,IAAOP,SAAUJ,KAAKU,MAAMwG,UAAWmC,eAAgB,SAACvI,GAAD,OAAK,EAAKT,WAAWS,IAAIT,WAAY,kBAAI,EAAKA,gBACrJ,0BAAMP,UAAU,SAEbE,KAAKU,MAAM8H,YAAYQ,SACtB,kBAAC,EAAD,CAAMpH,aAAc,SAACjB,GAAD,OAAQ,EAAK0H,cAAc1H,MAC9C,KAEFX,KAAKU,MAAM8H,YAAYI,iBACtB,kBAAC,EAAD,MACC,KAEF5I,KAAKU,MAAM8H,YAAYK,eACtB,kBAAC,EAAD,CAAYjH,aAAc,SAACjB,GAAD,OAAQ,EAAK0H,cAAc1H,IAAMP,SAAUJ,KAAKU,MAAMwG,UAAUwB,kBAAmB,kBAAI,EAAKA,qBACrH,KAEF1I,KAAKU,MAAM8H,YAAYO,aACtB,kBAAC,EAAD,CAAUnH,aAAc,SAACjB,GAAD,OAAQ,EAAK0H,cAAc1H,IAAOR,cAAe,SAACQ,GAAD,OAAS,EAAK0H,cAAc1H,MACpG,KAEFX,KAAKU,MAAM8H,YAAYM,UACtB,kBAAC,EAAD,CAAOlH,aAAc,SAACjB,GAAD,OAAQ,EAAK0H,cAAc1H,IAAOyI,aAAcpJ,KAAKoJ,eACzE,KAEFpJ,KAAKU,MAAM8H,YAAYS,iBACtB,kBAAC,EAAD,CAAcrH,aAAc,SAACjB,GAAD,OAAQ,EAAK0H,cAAc1H,IAAOyI,aAAcpJ,KAAKoJ,eAChF,W,GA9GS9I,aCEEgJ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnH,MAAK,SAAAoH,GACJA,EAAaC,gBAEd9D,OAAM,SAAAC,GACL/D,QAAQ+D,MAAMA,EAAM8D,c","file":"static/js/main.d4bdcde2.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/database';\r\nimport 'firebase/storage';\r\nimport 'firebase/auth';\r\n\r\n  // Import Firebase Database, Storage, and Auth\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBslURg8BzIY4LQyAMs7COxthAVymmySyQ\",\r\n    authDomain: \"recipe-poster-app.firebaseapp.com\",\r\n    databaseURL: \"https://recipe-poster-app.firebaseio.com\",\r\n    projectId: \"recipe-poster-app\",\r\n    storageBucket: \"recipe-poster-app.appspot.com\",\r\n    messagingSenderId: \"320111871342\",\r\n    appId: \"1:320111871342:web:e6390d3b30e73c05612d7f\"\r\n};\r\n  // Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase","import React, { Component } from 'react'\r\n\r\nclass MobileNav extends Component{\r\n\r\n    //Only rendered when state in Nav is true for showMobileNav    \r\n    render(){\r\n        return(\r\n            <nav className=\"mobileNav\" onClick={this.props.toggleMobileNav}>\r\n                <ul className=\"mobileNavUL\">\r\n                    <li onClick={()=>this.props.toggleSection(\"showHome\")}>Home</li>\r\n                    <li onClick={()=>this.props.toggleSection(\"showRecipeForm\")}>Add Recipes</li>\r\n                    <li onClick={()=>this.props.toggleSection(\"showSavedRecipes\")}>View Recipes</li>\r\n                    {this.props.loggedIn ?\r\n                        <>\r\n                            <li onClick={()=>this.props.toggleSection(\"showUserSettings\")}><i className=\"fas fa-user-circle\"></i> Settings</li>\r\n                            <li onClick={()=>this.props.userLogout()}>Logout</li>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <li onClick={()=>this.props.toggleSection(\"showLogin\")}>Login</li>\r\n                            <li onClick={()=>this.props.toggleSection(\"showRegister\")}>Register</li>\r\n                        </>\r\n                    }\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\nexport default MobileNav","import React, { Component } from 'react'\r\nimport MobileNav from './MobileNav'\r\n\r\nclass Nav extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state= {\r\n            showMobileNav:false,\r\n        }\r\n    }\r\n\r\n    toggleMobileNav=()=>{ //Toggles the state to get in and out of Mobile Nav\r\n        this.setState({\r\n            showMobileNav:!this.state.showMobileNav\r\n        })\r\n    }   \r\n    \r\n    render(){\r\n        return(\r\n        <>\r\n            <nav className=\"desktopNav\">\r\n                <button className=\"mobileNavButton\" onClick={()=>this.toggleMobileNav()}><i className=\"fas fa-bars\"></i></button>\r\n                <div className=\"bleed\">\r\n                    <div className=\"logoContainer\">\r\n                        <i className=\"fas fa-utensils\"></i>\r\n                    </div>\r\n                    <ul className=\"navUL\">\r\n                        <li className=\"appName\" onClick={()=>this.props.toggleSection(\"showHome\")}>//recipeApp</li>\r\n                        <li onClick={()=>this.props.toggleSection(\"showHome\")}>Home</li>\r\n                        <li onClick={()=>this.props.toggleSection(\"showRecipeForm\")}>Add Recipes</li>\r\n                        <li onClick={()=>this.props.toggleSection(\"showSavedRecipes\")}>View Recipes</li>\r\n                        {this.props.loggedIn ?\r\n                            <>\r\n                                <li onClick={()=>this.props.toggleSection(\"showUserSettings\")}><i className=\"fas fa-user-circle\"></i> Settings</li>\r\n                                <li onClick={()=>this.props.userLogout()}>Logout</li>\r\n                            </>\r\n                            :\r\n                            <>\r\n                                <li onClick={()=>this.props.toggleSection(\"showLogin\")}>Login</li>\r\n                                <li onClick={()=>this.props.toggleSection(\"showRegister\")}>Register</li>\r\n                            </>\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n            {this.state.showMobileNav ? \r\n                <MobileNav toggleSection={(item)=>this.props.toggleSection(item)} toggleMobileNav={this.toggleMobileNav} loggedIn={this.props.loggedIn} userLogout={()=>this.props.userLogout()}/>\r\n                :null}\r\n        </>\r\n        )\r\n    }\r\n}\r\nexport default Nav","import React, { Component } from 'react'\r\nimport firebase from './firebase'\r\n\r\n\r\nclass RecipeForm extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n        newDraft: {\r\n            name:'',\r\n            ingredients:'',\r\n            instructions:'',\r\n            description:'',\r\n            finalImage:null,\r\n            finalImageUrl:''\r\n            }\r\n        }\r\n    }\r\n    \r\n    handleClick=(e)=>{\r\n        e.preventDefault();\r\n    }\r\n\r\n    submitRecipe=(e)=>{  //Saves the values of the states and uploads it to Firebase Database under Recipes folder\r\n        this.handleClick(e);\r\n        const dbRef = firebase.database().ref('recipes')\r\n        dbRef.push(this.state.newDraft)\r\n\r\n        this.setState({ //Reset the state so we can clear the form.. \r\n            newDraft:{\r\n                name:'',\r\n                ingredients:'',\r\n                instructions:'',\r\n                description:'',\r\n                finalImage:null,\r\n                finaleImageUrl:'',\r\n                placeholder:''\r\n            }\r\n        })\r\n        \r\n        this.props.toggleSelect('showSavedRecipes') //Brings us to the Saved Recipes so we can see what we uploaded\r\n        alert('Your recipe has been added!')\r\n    }\r\n\r\n    //Below are all functions to update the state\r\n    updateTitle=(e)=>{\r\n        const draft = this.state.newDraft;\r\n        draft.name = e.target.value;\r\n        this.setState({newDraft:draft})\r\n    }\r\n\r\n    updateDescription=(e)=>{\r\n        const draft = this.state.newDraft;\r\n        draft.description = e.target.value;\r\n        this.setState({newDraft:draft})\r\n    }\r\n    \r\n    updateIngredient=(e)=>{\r\n        const draft = this.state.newDraft;\r\n        const listArray = e.target.value.split('\\n') //Used to turn the input to an array so we can map and create dynamic LI\r\n        draft.ingredients = listArray;\r\n        this.setState({newDraft:draft})\r\n    }\r\n    updateInstructions=(e)=>{\r\n        const draft = this.state.newDraft;\r\n        const listArray = e.target.value.split('\\n') //Used to turn the input to an array so we can map and create dynamic LI\r\n        draft.instructions = listArray;\r\n        this.setState({newDraft:draft})\r\n    }\r\n\r\n    uploadImageState = (e)=>{ //Uses the image to save to the state\r\n        console.log(e.target.files)\r\n        const image = e.target.files[0];\r\n        const draft= this.state.newDraft;\r\n        draft.finalImage = image;\r\n        this.setState({newDraft: draft})\r\n    }\r\n\r\n    uploadTask = (e)=>{ //Uses the state to upload the image into the Firebase Storage\r\n        e.preventDefault()\r\n        const image = this.state.newDraft.finalImage\r\n        firebase.storage().ref(`recipeImages/${image.name}`).put(image)\r\n        .then(()=>{\r\n            firebase.storage().ref('recipeImages').child(image.name).getDownloadURL().then((url)=>{ //Saves the image to recipeImages with the name that was uploaded\r\n                const imageUrl = url\r\n                const draft = this.state.newDraft\r\n                draft.finalImageUrl = imageUrl\r\n                this.setState({\r\n                    newDraft : draft\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        const newDraft = this.state.newDraft\r\n        if (firebase.auth().currentUser !== null){\r\n            newDraft.author = firebase.auth().currentUser.displayName //Listens to see if logged in- which you have to be to post. This saves the state so we can save the author and icon to the image\r\n            newDraft.authorImage = firebase.auth().currentUser.photoURL\r\n            this.setState({\r\n                newDraft\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <section className=\"recipeFormSection\">\r\n                {this.props.loggedIn ? \r\n                <form action=\"submit\" className=\"recipeForm\">\r\n                    <h2>Add a recipe!</h2>\r\n\r\n                    <div className=\"imageContainer\">\r\n                        <img src={this.state.newDraft.finalImageUrl} alt={this.state.newDraft.description} />\r\n                    </div>\r\n\r\n                    <label htmlFor=\"uploadRecipeImage\">Upload the final image of your dish!</label>\r\n                    <input type=\"file\" id=\"uploadRecipeImage\" onChange={this.uploadImageState}/>\r\n                    <button onClick={this.uploadTask}>Upload Image</button>\r\n\r\n                    <label htmlFor=\"recipeTitle\">Name the dish!</label>\r\n                    <input type=\"text\" id=\"recipeTitle\" maxLength=\"25\" onChange={this.updateTitle} value={this.state.newDraft.name}/>\r\n\r\n                    <label htmlFor=\"recipeDescription\">Add a description for your dish</label>\r\n                    <textarea id=\"recipeDescription\" onChange={this.updateDescription} value={this.state.newDraft.description}/>\r\n\r\n                    <label htmlFor=\"recipeIngredients\">Ingredient Name and Quantity (Enter each ingredient on a new line for better results!)</label>\r\n                    <textarea id=\"recipeIngredients\" onChange={this.updateIngredient} placeholder=\"Example: 5 tbs of Sugar\" value={this.state.newDraft.placeholder}/>\r\n\r\n                    <label htmlFor=\"recipeSteps\">List your steps below! (Enter each step on a new line for better results!)</label>\r\n                    <textarea id=\"recipeSteps\" onChange={this.updateInstructions} value={this.state.newDraft.placeholder}/>\r\n                    \r\n                    <button onClick={this.submitRecipe}>Submit</button>\r\n                </form>\r\n                :\r\n                <section className=\"recipeFormSection\">\r\n                    <h2>You must be logged in to add a recipe!</h2>\r\n\r\n                    <form action=\"submit\" className=\"recipeForm\">\r\n                        <h2>Add a recipe!</h2>\r\n\r\n                        <div className=\"imageContainer\">\r\n                            <img src={this.state.newDraft.finalImageUrl} alt={this.state.newDraft.description} />\r\n                        </div>\r\n\r\n                        <label htmlFor=\"uploadRecipeImage\">Upload the final image of your dish!</label>\r\n                        <input type=\"file\" id=\"uploadRecipeImage\" disabled onChange={this.uploadImageState}/>\r\n                        <button onClick={this.uploadTask} disabled>Upload Image</button>\r\n\r\n                        <label htmlFor=\"recipeTitle\">Name the dish!</label>\r\n                        <input type=\"text\" id=\"recipeTitle\" onChange={this.updateTitle} value={this.state.newDraft.name} disabled/>\r\n\r\n                        <label htmlFor=\"recipeDescription\">Add a description for your dish</label>\r\n                        <textarea id=\"recipeDescription\" onChange={this.updateDescription} value={this.state.newDraft.description} disabled/>\r\n\r\n                        <label htmlFor=\"recipeIngredients\">Ingredient Name and Quantity (Enter each ingredient on a new line for better results!)</label>\r\n                        <textarea id=\"recipeIngredients\" onChange={this.updateIngredient} placeholder=\"Example: 5 tbs of Sugar\" value={this.state.newDraft.placeholder} disabled/>\r\n\r\n                        <label htmlFor=\"recipeSteps\">List your steps below! (Enter each step on a new line for better results!)</label>\r\n                        <textarea id=\"recipeSteps\" onChange={this.updateInstructions} value={this.state.newDraft.placeholder} disabled/>\r\n                        \r\n                        <button onClick={this.submitRecipe} disabled>Submit</button>\r\n                    </form>\r\n                </section>\r\n                }\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RecipeForm","import React, { Component } from 'react'\r\nimport firebase from './firebase'\r\n\r\n\r\nclass FocusRecipe extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            focusedItem:{ // This is generated based on what the user selects during the SavedRecipes component\r\n                ingredients:[],\r\n                instructions:[],\r\n            }\r\n        }\r\n    }\r\n    \r\n    componentDidMount(){\r\n        firebase.database().ref('recipes/'+this.props.focusKey).on('value', (response)=>{ // Gets the input from a user from the saved Recipe, and updates the state to the item selected which will then be brought up to your screen\r\n            const focusedItem = response.val();\r\n            this.setState({\r\n                focusedItem\r\n            })\r\n        })\r\n    }\r\n\r\nrender(){\r\n    return(\r\n        <section className=\"focusedRecipeSection\" onClick={()=>this.props.toggleFocus()}> \r\n            <div className=\"focusedRecipe\" key={'f_'+this.props.focusKey}>\r\n                <div className=\"imageContainer focusedImage\">\r\n                    <img src={this.state.focusedItem.finalImageUrl} alt={this.state.focusedItem.description}/>\r\n                </div>\r\n                <div className=\"focusRecipeDescription\">\r\n                    <h2>{this.state.focusedItem.name}</h2>\r\n                    <p>{this.state.focusedItem.description}</p>\r\n                </div>\r\n                <div className=\"focusedIngredientList\">\r\n                    <h3>Ingredients</h3>\r\n                    {this.state.focusedItem.ingredients.map((ingredient, index)=>{\r\n                    return(\r\n                        <li key={'f_'+this.state.focusedItem.name+'_ingredient_'+index}>{ingredient}</li>\r\n                        )\r\n                    })}\r\n                </div>\r\n                <div className=\"focusedInstructionsList\">\r\n                    <h3>Directions</h3>\r\n                    {this.state.focusedItem.instructions.map((instruction, index)=>{\r\n                    return(\r\n                        <li key={'f_'+this.state.focusedItem.name+'_instructions_'+index}>{instruction}</li>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )}\r\n}\r\n\r\nexport default FocusRecipe\r\n","import React, { Component } from 'react'\r\nimport firebase from './firebase'\r\nimport FocusRecipe from './FocusRecipe'\r\n\r\n\r\nclass SavedRecipes extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n        recipes : [],\r\n        showFocus:false,\r\n        focusKey:'',\r\n        }\r\n    }\r\n    \r\n    componentDidMount(){ //Gets the recipes from the database and saves them into the recipes state which will then be rendered and mapped\r\n        const dbRef = firebase.database().ref('recipes');\r\n        dbRef.on('value', (response)=>{\r\n        const newState= [];\r\n        const data = response.val();\r\n        for (let key in data){\r\n            newState.push({key:key, name: data[key]})\r\n        }\r\n        this.setState({\r\n            recipes: newState\r\n            })\r\n        })\r\n    }\r\n    \r\n    focusRecipe=(key)=>{ //Toggles recipe focus which will use the key from the object and send it to a focus state/component which displays the recipe in a larger component\r\n        this.setState({\r\n            showFocus:true,\r\n            focusKey: key\r\n        })\r\n    }\r\n\r\n    toggleFocus=()=>{ //Used to get in and out of the focus state\r\n        this.setState({\r\n            showFocus:!this.state.showFocus\r\n        })\r\n    }\r\n\r\nrender(){\r\n    return(\r\n        <section className=\"savedRecipesSection\">\r\n            <div className=\"savedRecipes\">\r\n                {this.state.recipes.map((recipe, index)=>{\r\n                    return(\r\n                    <ul className=\"recipeUL\" key={'ul_'+recipe.key} >\r\n                        <li className=\"recipeLI\" key={recipe.key} id={recipe.key} onClick={()=>this.focusRecipe(recipe.key)}>\r\n                        <div className=\"imageContainer recipeImage\">\r\n                            <img src={recipe.name.finalImageUrl} alt={recipe.name.description}/>\r\n                        </div>\r\n                        <div className=\"recipeTextContainer\">\r\n                            <h2>{recipe.name.name}</h2>\r\n                            <div className=\"authorContainer\">\r\n                                <p>Posted by:</p>\r\n                                <div className=\"imageContainer authorIcon\">\r\n                                    <img src={recipe.name.authorImage} alt=\"author icon\"/>\r\n                                </div>\r\n                                <p>{recipe.name.author}</p>\r\n                            </div>\r\n                            <p className=\"recipeDescription\">{recipe.name.description}</p>\r\n                        </div>\r\n                        </li>\r\n                    </ul>\r\n                    )\r\n                })}\r\n            </div>\r\n            {this.state.showFocus?\r\n                <FocusRecipe focusKey={this.state.focusKey} toggleFocus={this.toggleFocus} />\r\n                :null}\r\n        </section>\r\n    )}\r\n}\r\n\r\nexport default SavedRecipes","import React, { Component } from 'react'\r\n\r\nclass Login extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    loginInputs =(e)=>{\r\n        e.preventDefault();\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n\r\n    //When showTOS is true (from saved Recipes), show this component in a focus state\r\n    //The TOS is fake, do not waste your time reading it\r\n    render(){\r\n        return(\r\n            <section className=\"termsOfUseSection\" onClick={()=>this.props.toggleTerms()}>\r\n                <div className=\"policyBox\">\r\n                    <label htmlFor=\"policyCheckBox\">\r\n                    <p>Terms and Conditions</p>\r\n\r\n<p>These terms and conditions outline the rules and regulations for the use of Company Name's Website, located at Website.com.</p>\r\n\r\n<p>By accessing this website we assume you accept these terms and conditions. Do not continue to use Website Name if you do not agree to take all of the terms and conditions stated on this page.</p>\r\n\r\n<p>Cookies</p>\r\n<p>We employ the use of cookies. By accessing Website Name, you agreed to use cookies in agreement with the Company Name's Privacy Policy.</p>\r\n\r\n<p>Most interactive websites use cookies to let us retrieve the user's details for each visit. Cookies are used by our website to enable the functionality of certain areas to make it easier for people visiting our website. Some of our affiliate/advertising partners may also use cookies.</p>\r\n\r\n<p>License</p>\r\n<p>Unless otherwise stated, Company Name and/or its licensors own the intellectual property rights for all material on Website Name. All intellectual property rights are reserved. You may access this from Website Name for your own personal use subjected to restrictions set in these terms and conditions.</p>\r\n\r\n<p>You must not:</p>\r\n\r\n<p>Republish material from Website Name</p>\r\n<p>Sell, rent or sub-license material from Website Name</p>\r\n<p>Reproduce, duplicate or copy material from Website Name</p>\r\n<p>Redistribute content from Website Name</p>\r\n<p>This Agreement shall begin on the date hereof.</p>\r\n\r\n<p>Parts of this website offer an opportunity for users to post and exchange opinions and information in certain areas of the website. Company Name does not filter, edit, publish or review Comments prior to their presence on the website. Comments do not reflect the views and opinions of Company Name,its agents and/or affiliates. Comments reflect the views and opinions of the person who post their views and opinions. To the extent permitted by applicable laws, Company Name shall not be liable for the Comments or for any liability, damages or expenses caused and/or suffered as a result of any use of and/or posting of and/or appearance of the Comments on this website.</p>\r\n\r\n<p>Company Name reserves the right to monitor all Comments and to remove any Comments which can be considered inappropriate, offensive or causes breach of these Terms and Conditions.</p>\r\n\r\n<p>You warrant and represent that:</p>\r\n\r\n<p>Hyperlinking to our Content</p>\r\n<p>The following organizations may link to our Website without prior written approval:</p>\r\n\r\n<p>Content Liability</p>\r\n<p>We shall not be hold responsible for any content that appears on your Website. You agree to protect and defend us against all claims that is rising on your Website. No link(s) should appear on any Website that may be interpreted as libelous, obscene or criminal, or which infringes, otherwise violates, or advocates the infringement or other violation of, any third party rights.</p>\r\n\r\n                    </label>\r\n                    <input type=\"checkbox\" id=\"policyCheckBox\" />\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login","import React, { Component } from 'react'\r\nimport firebase from './firebase'\r\nimport TermsOfUse from './TermsOfUse'\r\n\r\nclass Register extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            registerEmail:'',\r\n            registerPassword:'',\r\n            confirmPassword:'',\r\n            termsCheckBox: false,\r\n            passwordsMatch: false,\r\n            displayName: '',\r\n            showTerm: false,\r\n            photoURL:'https://miro.medium.com/max/480/0*WK_vAxJo4O7Kdq3j.png' //default picture for avatar\r\n        }\r\n    }\r\n\r\n    handleChange=(e)=>{\r\n        this.listenForMatch();\r\n        this.setState({\r\n            [e.target.id] : e.target.value\r\n        })\r\n    }\r\n\r\n    listenForMatch=()=>{\r\n        if (this.state.registerPassword === this.state.confirmPassword && this.state.registerPassword !==\"\"){ //Checks to see if password and confirm password field matches\r\n            this.setState({passwordsMatch : true})\r\n        } else{\r\n            this.setState({passwordsMatch : false})\r\n        }\r\n    }\r\n\r\n    registerUser =(e)=>{\r\n        e.preventDefault();\r\n        \r\n        if (this.state.termsCheckBox===true && this.state.passwordsMatch===true){\r\n            return firebase.auth().createUserWithEmailAndPassword(this.state.registerEmail, this.state.registerPassword) //Creates the User with the email in state, and password, only IF terms are checked, and passwords match/TRUE\r\n            .then((user)=>{\r\n                firebase.auth().currentUser.updateProfile({ //Uses the current user (which is automatically logged into when created), and sets the display name and photo to the state's DisplayName and PhotoURL\r\n                    displayName:this.state.displayName,\r\n                    photoURL:this.state.photoURL,\r\n                })\r\n            }).then(()=>{\r\n                this.setState({ //Reset Fields\r\n                    registerEmail:'',\r\n                    registerPassword:'',\r\n                    confirmPassword:'',\r\n                    termsCheckBox: false,\r\n                    passwordsMatch: false,\r\n                    displayName: '',\r\n                    photoURL:'https://miro.medium.com/max/480/0*WK_vAxJo4O7Kdq3j.png'\r\n                })\r\n            })\r\n            .catch((error)=>{\r\n                alert(error)\r\n            })\r\n        }\r\n    }\r\n\r\n    handleCheckbox =(e)=>{\r\n        this.setState({ //Toggle state for terms when checkbox is checked\r\n            [e.target.id] : !this.state.termsCheckBox\r\n        })\r\n    }\r\n\r\n    toggleTerms=()=>{ //Toggles a state to show the TOS when clicked -used to also get out of the TOS page \r\n        this.setState({\r\n            showTerm:!this.state.showTerm,\r\n        })\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <section className=\"registerSection\">\r\n                <form className=\"registerForm\">\r\n                    <div className=\"imageContainer avatarImage\">\r\n                        <img src={this.state.photoURL} alt={this.state.displayName +'user photo'} />\r\n                    </div>\r\n\r\n                    <h2>Register</h2>\r\n                    <p>Create your account. It's free, and only takes a minute!</p>\r\n                    <p>Already have an account?<span onClick={()=>this.props.toggleSelect(\"showLogin\")}> Click  here to login to your account!</span></p>\r\n                    \r\n                    <label htmlFor=\"registerEmail\">Email</label>\r\n                    <input type=\"email\" id=\"registerEmail\" onChange={this.handleChange}/>\r\n\r\n                    <label htmlFor=\"registerPassword\">Password</label>\r\n                    <input type=\"password\" id=\"registerPassword\" onChange={this.handleChange} minLength=\"3\" />\r\n\r\n                    <label htmlFor=\"confirmPassword\">Confirm Password</label>\r\n                    <input type=\"password\" id=\"confirmPassword\" onChange={this.handleChange}/>\r\n                    {this.state.passwordsMatch?null:<span>Passwords must match!</span>}\r\n\r\n                    <label htmlFor=\"displayName\">Display Name</label>\r\n                    <input type=\"text\" id=\"displayName\" maxLength=\"20\" onChange={this.handleChange}/>\r\n\r\n                    <div className=\"termsContainer\">\r\n                        <input type=\"checkbox\" id=\"termsCheckBox\" onChange={this.handleCheckbox}/>\r\n                        <label htmlFor=\"termsCheckBox\">I accept the <span onClick={()=>{this.setState({showTerm:true})}}>Terms of Use and Privacy Policy.</span></label>\r\n                    </div>\r\n\r\n\r\n                    <button onClick={this.registerUser}>Register Now</button>\r\n\r\n                    {this.state.showTerm ? <TermsOfUse toggleTerms={()=>this.toggleTerms()}/> : null}\r\n                </form>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Register","import React, { Component } from 'react'\r\nimport firebase from './firebase'\r\n\r\nclass ResetPassword extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            email:''\r\n        }\r\n    }\r\n\r\n    passwordStateChange=(e)=>{ // Set the state of email from input in form\r\n        this.setState({email: e.target.value})\r\n    }\r\n\r\n    resetPassword=(e)=>{ // Reset the password with the current state using sendPasswordResetEmail()\r\n        e.preventDefault()\r\n\r\n        firebase.auth().sendPasswordResetEmail(this.state.email)\r\n        .then(()=>{\r\n            alert('Please check your inbox for an email!')\r\n            this.props.toggleSelect(\"showLogin\")\r\n            this.setState({\r\n                email:''\r\n            })\r\n        })\r\n        .catch(()=>{\r\n            alert('This email is not registered')\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <section className=\"forgotPasswordSection\">\r\n                <div className=\"resetPassword\">\r\n                    <h2>Enter your email below to reset your password!</h2>\r\n                    \r\n                    <label htmlFor=\"resetPassword\">Email/Username</label>\r\n                    <input type=\"text\" id=\"resetPassword\" onChange={this.passwordStateChange} value={this.state.email}/>\r\n\r\n                    <button onClick={this.resetPassword}>Reset Password</button>\r\n\r\n                    <span onClick={()=>this.props.forgotPassword()}>Cancel...</span>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ResetPassword","import React, { Component } from 'react'\r\nimport firebase from './firebase'\r\nimport ResetPassword from './ResetPassword'\r\n\r\nclass Login extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            loginName:'',\r\n            loginPassword:'',\r\n            forgotPassword:false,\r\n        }\r\n    }\r\n\r\n    userLogin = (e) =>{ // Gets the information from state and users Firebase Auth to sign into an existing account\r\n        e.preventDefault();\r\n        firebase.auth().signInWithEmailAndPassword(this.state.loginName, this.state.loginPassword).then((user)=>{\r\n            console.log('User successfully signed in');\r\n        }).catch((error)=>{\r\n            alert(error)\r\n        })\r\n    }\r\n\r\n    loginInputs =(e)=>{ // Gets the user info and saves to state\r\n        e.preventDefault();\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n\r\n    forgotPassword=()=>{ // Brings up the forgot password form\r\n        this.setState({\r\n            forgotPassword : !this.state.forgotPassword\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <section className=\"loginSection\">\r\n                <form className=\"signInForm\">\r\n                    <h2>Login</h2>\r\n                    \r\n                    <label htmlFor=\"loginName\">Username</label>\r\n                    <input type=\"text\" id=\"loginName\" onChange={this.loginInputs}/>\r\n\r\n                    <label htmlFor=\"loginPassword\">Password</label>\r\n                    <input type=\"password\" id=\"loginPassword\" onChange={this.loginInputs} />\r\n\r\n                    <p>Don't have an account? <span onClick={()=>{this.props.toggleSelect(\"showRegister\")}}>Click here to register for an account.</span></p>\r\n                    <p>Forgot your password? <span onClick={()=>this.forgotPassword()}>Click here to be sent a new password.</span></p>\r\n                    \r\n\r\n                    <button onClick={this.userLogin}>Login</button>\r\n                </form>\r\n            </section>\r\n            {this.state.forgotPassword ? <ResetPassword toggleSelect={(item)=>{this.props.toggleSelect(item)}} forgotPassword={()=>this.forgotPassword()}/> : null}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login","import React, { Component } from 'react'\r\nimport firebase from './firebase'\r\n\r\nclass UserSettings extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            currentUser:{},\r\n            setDisplayName:'',\r\n            userUploadImage:'',\r\n            setEmail:'',\r\n            setPassword:'',\r\n        }\r\n    }\r\n    getUserInfo=()=>{ //Getting the current user settings and saving them into the state\r\n        const user = firebase.auth().currentUser;\r\n        const currentUser = {\r\n            displayName: user.displayName,\r\n            email: user.email,\r\n            photoURL : user.photoURL,\r\n            uid : user.uid\r\n        }\r\n        if (currentUser.photoURL ===undefined || currentUser.photoURL ===null ){\r\n            currentUser.photoURL = 'https://miro.medium.com/max/480/0*WK_vAxJo4O7Kdq3j.png'\r\n        }\r\n\r\n        this.setState({\r\n            currentUser\r\n        })\r\n    }\r\n\r\n    componentDidMount(){ //Calling the getUserInfo function to save to state\r\n        this.getUserInfo()\r\n    }\r\n\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n\r\n    changeImageState=(e)=>{ //Change the image state to store the image which we can upload after using the uploadImage function\r\n        const image = e.target.files[0];\r\n        this.setState({\r\n            userUploadImage : image\r\n        })\r\n    }\r\n\r\n    uploadImage=(e)=>{ // Uploads the image into firebase and adjusts the user photo url to that url\r\n        e.preventDefault()\r\n        const image = this.state.userUploadImage\r\n        firebase.storage().ref(`userImages/${image.name}`).put(image)\r\n        .then(()=>{\r\n            firebase.storage().ref('userImages').child(image.name).getDownloadURL().then((url)=>{\r\n                const imageUrl = url\r\n                firebase.auth().currentUser.updateProfile({photoURL: imageUrl})\r\n                const currentUser = this.state.currentUser\r\n                currentUser.photoURL = imageUrl\r\n                this.setState({\r\n                    currentUser,\r\n                    userUploadImage:''\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    updateDisplayName=(e)=>{ //uses the state to update the name\r\n        e.preventDefault()\r\n        firebase.auth().currentUser.updateProfile({\r\n            displayName: this.state.setDisplayName\r\n        }).then(()=>{\r\n            this.setState({\r\n                setDisplayName:''\r\n            })\r\n            this.getUserInfo()\r\n        })\r\n        .catch((error)=>{\r\n            alert(error)\r\n        })\r\n    }\r\n    updateEmail=(e)=>{ //uses the state to update the email\r\n        e.preventDefault()\r\n        firebase.auth().currentUser.updateEmail(this.state.setEmail)\r\n        .then(()=>{\r\n            this.setState({\r\n                setEmail:''\r\n            })\r\n            this.getUserInfo()\r\n        })\r\n        .catch((error)=>{\r\n            alert(error)\r\n        })\r\n    }\r\n\r\n    updatePassword=(e)=>{ //uses the state to update password\r\n        e.preventDefault()\r\n        firebase.auth().currentUser.updatePassword(this.state.setPassword)\r\n        .then(()=>{\r\n            this.setState({\r\n                setDisplayName:''\r\n            })\r\n            this.getUserInfo()\r\n        })\r\n        .catch((error)=>{\r\n            alert(error)\r\n        })\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <section className=\"userSettingsSection\">\r\n                    <h2>User Account Settings</h2>\r\n                <form className=\"userSettings\">\r\n                    <div className=\"imageContainer avatarImage\">\r\n                        <img src={this.state.currentUser.photoURL} alt={this.state.currentUser.name +\"profile picture\"} />\r\n                    </div>\r\n\r\n                    <div className=\"settingsContainer\">\r\n                        <p>{this.state.currentUser.displayName}</p>\r\n                        <p>{this.state.currentUser.email}</p>\r\n                    </div>\r\n\r\n                    <div className=\"settingsContainer\">\r\n                        <label htmlFor=\"userUploadImage\">Upload a profile picture!</label>\r\n                        <input type=\"file\" id=\"userUploadImage\" onChange={this.changeImageState}/>\r\n                        <button onClick={this.uploadImage}>Upload Image</button>\r\n                    </div>\r\n\r\n                    <div className=\"settingsContainer\">\r\n                        <label htmlFor=\"setDisplayName\">Display Name</label>\r\n                        <input type=\"text\" maxLength=\"20\" id=\"setDisplayName\" onChange={this.handleChange} value={this.state.setDisplayName}/>\r\n                        <button onClick={this.updateDisplayName}>Update Display Name</button>\r\n                    </div>\r\n\r\n                    <div className=\"settingsContainer\">\r\n                        <label htmlFor=\"setEmail\">Update Email</label>\r\n                        <input type=\"email\" id=\"setEmail\" onChange={this.handleChange} value={this.state.setEmail}/>\r\n                        <button onClick={this.updateEmail}>Update Email</button>\r\n                    </div>\r\n\r\n                    <div className=\"settingsContainer\">\r\n                        <label htmlFor=\"setPassword\">Update Password</label>\r\n                        <input type=\"password\" id=\"setPassword\" onChange={this.handleChange} value={this.state.setPassword}/>\r\n                        <button onClick={this.updatePassword}>Upload Password</button>\r\n                    </div>\r\n\r\n                </form>\r\n            </section>\r\n        )\r\n    }\r\n}\r\nexport default UserSettings","import React, { Component } from 'react'\r\nimport firebase from 'firebase'\r\n\r\nclass Home extends Component{\r\n    // Basic home page which will show a message and call a component when spans are clicked.\r\n    render(){\r\n        return(\r\n            firebase.auth().currentUser ===null?\r\n            <section className=\"homeSection\">\r\n                <h2>Welcome to my Recipe Poster App!</h2>\r\n                <p>This app allows you to view recipes that were posted by registered users.</p>\r\n                <p>If you would like to post a recipe, you must <span onClick={()=>this.props.toggleSelect(\"showRegister\")}>create an account with your email</span>, then head over to the <span onClick={()=>this.props.toggleSelect(\"showRecipeForm\")}>'Add Recipe'</span> section.</p>\r\n            </section>\r\n            :\r\n            <section className=\"homeSection\">\r\n                <h2>Welcome back {firebase.auth().currentUser.displayName}!</h2>\r\n                <p>If you haven't already, you can change your avatar to show the other users what you look like over in <span onClick={()=>this.props.toggleSelect(\"showUserSettings\")}>'Settings'.</span></p>\r\n                <p>If you would like to post a recipe, head over to the <span onClick={()=>this.props.toggleSelect(\"showRecipeForm\")}>'Add Recipe'</span> section.</p>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import React, { Component } from 'react';\nimport firebase from './firebase'\nimport Nav from './Nav'\nimport RecipeForm from './RecipeForm'\nimport SavedRecipes from './SavedRecipes'\nimport Register from './Register'\nimport Login from './Login'\nimport UserSettings from './UserSettings'\nimport Home from './Home'\n\nclass App extends Component{\n  constructor(){\n    super()\n    this.state = {\n      showSection:{\n        showSavedRecipes: false,\n        showRecipeForm: false,\n        showLogin: false,\n        showRegister:false,\n        showHome:false,\n        showUserSettings:false,\n      },\n      recipeAdded:false,\n      userLogin:false,\n      userID:null,\n    }\n  }\n\n\n  selectSection=(select)=>{   //This gets called when I want to change to toggle states - turns all to false first, then gets the input from where it is being called\n    const allStates = this.state.showSection\n    for (let key in allStates){\n        allStates[key] = null\n      }\n    this.setState(\n      {showSection: allStates}\n    )\n    const newState= this.state.showSection\n    newState[select] = !newState[select]\n    this.setState({\n      showSection : newState\n    })\n  }\n\n  authListener(){ //This is used to see if user is logged in, as well as bringing you to home when user is logged in\n    firebase.auth().onAuthStateChanged((user)=>{\n      user === null ?\n        this.setState({\n          showSection:{\n            showSavedRecipes: false,\n            showRecipeForm: false,\n            showLogin: false,\n            showRegister:false,\n            showHome:true,\n            showUserSettings:false,\n          },\n          userLogin:false,\n          userID: user\n        })\n        :\n      this.setState({\n        showSection:{\n          showSavedRecipes: false,\n          showRecipeForm: false,\n          showLogin: false,\n          showRegister:false,\n          showHome:true,\n          showUserSettings:false,\n        },\n        userLogin:true,\n        userID: user\n      })\n    })\n  }\n\n  componentDidMount(){ // Listens to see if user logs in/out\n    this.authListener()\n  }\n\n  userLogout = ()=>{  //Used to log out the user\n    firebase.auth().signOut();\n    this.setState({\n      userLogin:false\n    })\n  }\n\n  updateRecipeState=()=>{\n    this.setState({\n      recipeAdded: true\n    })\n  }\n\n  render(){ // Most of the render below is contingeant on what the user will click on the NAV. The NAV is the only thing truly consistent as it will always be mounted. The other components are only mounted on user input / clicking the NAV\n  return (\n    <>\n    <Nav toggleSection={(item)=> this.selectSection(item)} loggedIn={this.state.userLogin} logoutFunction={(e)=>this.userLogout(e)} userLogout={()=>this.userLogout()}/>\n    <main className=\"bleed\">\n\n      {this.state.showSection.showHome?\n        <Home toggleSelect={(item)=>this.selectSection(item)}/>\n        :null} \n\n      {this.state.showSection.showSavedRecipes?\n        <SavedRecipes />\n        :null} \n\n      {this.state.showSection.showRecipeForm?\n        <RecipeForm toggleSelect={(item)=>this.selectSection(item)}loggedIn={this.state.userLogin}updateRecipeState={()=>this.updateRecipeState}/>\n        :null} \n\n      {this.state.showSection.showRegister?\n        <Register toggleSelect={(item)=>this.selectSection(item)} toggleSection={(item)=> this.selectSection(item)} />\n        :null} \n\n      {this.state.showSection.showLogin?\n        <Login toggleSelect={(item)=>this.selectSection(item)} authListener={this.authListener}/>\n        :null} \n\n      {this.state.showSection.showUserSettings?\n        <UserSettings toggleSelect={(item)=>this.selectSection(item)} authListener={this.authListener}/>\n        :null} \n\n    </main>\n    </>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}